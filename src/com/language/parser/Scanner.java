/* The following code was generated by JFlex 1.5.1 */

package com.language.parser;

import java_cup.runtime.*;
import com.language.model.literals.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>C:/Users/usuario/git/nuevo/interpretejs/Compilador/language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\20\1\17\1\0\1\20\1\16\16\33\4\0\1\20\1\47"+
    "\1\41\1\0\1\12\1\0\1\45\1\42\1\43\1\44\1\22\1\53"+
    "\1\57\1\26\1\23\1\21\1\24\7\32\2\25\1\0\1\60\1\52"+
    "\1\50\1\51\2\0\4\30\1\27\1\30\7\12\1\54\11\12\1\31"+
    "\2\12\1\55\1\61\1\56\1\0\1\12\1\0\1\11\1\35\1\34"+
    "\1\30\1\5\1\1\1\12\1\12\1\4\1\12\1\36\1\6\1\12"+
    "\1\15\1\2\2\12\1\3\1\7\1\13\1\14\1\10\1\12\1\31"+
    "\2\12\1\37\1\46\1\40\1\0\41\33\2\0\4\12\4\0\1\12"+
    "\2\0\1\33\7\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12"+
    "\1\0\u01ca\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12"+
    "\21\0\160\33\5\12\1\0\2\12\2\0\4\12\10\0\1\12\1\0"+
    "\3\12\1\0\1\12\1\0\24\12\1\0\123\12\1\0\213\12\1\0"+
    "\5\33\2\0\236\12\11\0\46\12\2\0\1\12\7\0\47\12\11\0"+
    "\55\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0\1\33\10\0"+
    "\33\12\5\0\3\12\15\0\4\33\7\0\1\12\4\0\13\33\5\0"+
    "\53\12\37\33\4\0\2\12\1\33\143\12\1\0\1\12\10\33\1\0"+
    "\6\33\2\12\2\33\1\0\4\33\2\12\12\33\3\12\2\0\1\12"+
    "\17\0\1\33\1\12\1\33\36\12\33\33\2\0\131\12\13\33\1\12"+
    "\16\0\12\33\41\12\11\33\2\12\4\0\1\12\5\0\26\12\4\33"+
    "\1\12\11\33\1\12\3\33\1\12\5\33\22\0\31\12\3\33\244\0"+
    "\4\33\66\12\3\33\1\12\22\33\1\12\7\33\12\12\2\33\2\0"+
    "\12\33\1\0\7\12\1\0\7\12\1\0\3\33\1\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0"+
    "\1\33\1\12\7\33\2\0\2\33\2\0\3\33\1\12\10\0\1\33"+
    "\4\0\2\12\1\0\3\12\2\33\2\0\12\33\4\12\7\0\1\12"+
    "\5\0\3\33\1\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\33\1\0\5\33"+
    "\4\0\2\33\2\0\3\33\3\0\1\33\7\0\4\12\1\0\1\12"+
    "\7\0\14\33\3\12\1\33\13\0\3\33\1\0\11\12\1\0\3\12"+
    "\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\33"+
    "\1\12\10\33\1\0\3\33\1\0\3\33\2\0\1\12\17\0\2\12"+
    "\2\33\2\0\12\33\1\0\1\12\17\0\3\33\1\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0"+
    "\1\33\1\12\7\33\2\0\2\33\2\0\3\33\10\0\2\33\4\0"+
    "\2\12\1\0\3\12\2\33\2\0\12\33\1\0\1\12\20\0\1\33"+
    "\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\4\0"+
    "\5\33\3\0\3\33\1\0\4\33\2\0\1\12\6\0\1\33\16\0"+
    "\12\33\11\0\1\12\7\0\3\33\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\7\33\1\0\3\33"+
    "\1\0\4\33\7\0\2\33\1\0\2\12\6\0\2\12\2\33\2\0"+
    "\12\33\22\0\2\33\1\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\2\0\1\33\1\12\7\33\1\0\3\33\1\0"+
    "\4\33\7\0\2\33\7\0\1\12\1\0\2\12\2\33\2\0\12\33"+
    "\1\0\2\12\17\0\2\33\1\0\10\12\1\0\3\12\1\0\51\12"+
    "\2\0\1\12\7\33\1\0\3\33\1\0\4\33\1\12\10\0\1\33"+
    "\10\0\2\12\2\33\2\0\12\33\12\0\6\12\2\0\2\33\1\0"+
    "\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0"+
    "\1\33\4\0\6\33\1\0\1\33\1\0\10\33\22\0\2\33\15\0"+
    "\60\12\1\33\2\12\7\33\4\0\10\12\10\33\1\0\12\33\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\33\2\12\6\33\1\0\2\33\1\12\2\0"+
    "\5\12\1\0\1\12\1\0\6\33\2\0\12\33\2\0\2\12\42\0"+
    "\1\12\27\0\2\33\6\0\12\33\13\0\1\33\1\0\1\33\1\0"+
    "\1\33\4\0\2\33\10\12\1\0\44\12\4\0\24\33\1\0\2\33"+
    "\5\12\13\33\1\0\44\33\11\0\1\33\71\0\53\12\24\33\1\12"+
    "\12\33\6\0\6\12\4\33\4\12\3\33\1\12\3\33\2\12\7\33"+
    "\3\12\4\33\15\12\14\33\1\12\17\33\2\0\46\12\12\0\53\12"+
    "\1\0\1\12\3\0\u0149\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12\1\0\4\12"+
    "\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12\1\0\71\12"+
    "\1\0\4\12\2\0\103\12\2\0\3\33\40\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\3\0\3\12"+
    "\17\0\15\12\1\0\4\12\3\33\13\0\22\12\3\33\13\0\22\12"+
    "\2\33\14\0\15\12\1\0\3\12\1\0\2\33\14\0\64\12\40\33"+
    "\3\0\1\12\3\0\2\12\1\33\2\0\12\33\41\0\3\33\2\0"+
    "\12\33\6\0\130\12\10\0\51\12\1\33\1\12\5\0\106\12\12\0"+
    "\35\12\3\0\14\33\4\0\14\33\12\0\12\33\36\12\2\0\5\12"+
    "\13\0\54\12\4\0\21\33\7\12\2\33\6\0\12\33\46\0\27\12"+
    "\5\33\4\0\65\12\12\33\1\0\35\33\2\0\13\33\6\0\12\33"+
    "\15\0\1\12\130\0\5\33\57\12\21\33\7\12\4\0\12\33\21\0"+
    "\11\33\14\0\3\33\36\12\12\33\3\0\2\12\12\33\6\0\46\12"+
    "\16\33\14\0\44\12\24\33\10\0\12\33\3\0\3\12\12\33\44\12"+
    "\122\0\3\33\1\0\25\33\4\12\1\33\4\12\1\33\15\0\300\12"+
    "\47\33\25\0\4\33\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\16\0\5\33\32\0\5\33\20\0\2\12\23\0\1\12\13\0\5\33"+
    "\5\0\6\33\1\0\1\12\15\0\1\12\20\0\15\12\3\0\32\12"+
    "\26\0\15\33\4\0\1\33\3\0\14\33\21\0\1\12\4\0\1\12"+
    "\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12"+
    "\4\0\1\12\21\0\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12"+
    "\6\0\4\12\3\33\16\0\46\12\12\0\66\12\11\0\1\12\17\0"+
    "\1\33\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\40\33"+
    "\57\0\1\12\u01d5\0\3\12\31\0\11\12\6\33\1\0\5\12\2\0"+
    "\5\12\4\0\126\12\2\0\2\33\2\0\3\12\1\0\132\12\1\0"+
    "\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0"+
    "\u19b6\12\112\0\u51cc\12\64\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0"+
    "\20\12\12\33\2\12\24\0\57\12\1\33\14\0\2\33\1\0\31\12"+
    "\10\0\120\12\2\33\45\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\2\12\16\0\12\12\120\0\10\12\1\33\3\12\1\33\4\12\1\33"+
    "\27\12\5\33\20\0\1\12\7\0\64\12\14\0\2\33\62\12\21\33"+
    "\13\0\12\33\6\0\22\33\6\12\3\0\1\12\4\0\12\33\34\12"+
    "\10\33\2\0\27\12\15\33\14\0\35\12\3\0\4\33\57\12\16\33"+
    "\16\0\1\12\12\33\46\0\51\12\16\33\11\0\3\12\1\33\10\12"+
    "\2\33\2\0\12\33\6\0\27\12\3\0\1\12\1\33\4\0\60\12"+
    "\1\33\1\12\3\33\2\12\2\33\5\12\2\33\1\12\1\33\1\12"+
    "\30\0\3\12\43\0\6\12\2\0\6\12\2\0\6\12\11\0\7\12"+
    "\1\0\7\12\221\0\43\12\10\33\1\0\2\33\2\0\12\33\6\0"+
    "\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u012e\12\2\0\76\12\2\0"+
    "\152\12\46\0\7\12\14\0\5\12\5\0\1\12\1\33\12\12\1\0"+
    "\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0"+
    "\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\15\12\3\0"+
    "\20\33\20\0\7\33\14\0\2\12\30\0\3\12\31\0\1\12\6\0"+
    "\5\12\1\0\207\12\2\0\1\33\4\0\1\12\13\0\12\33\7\0"+
    "\32\12\4\0\1\12\1\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\3\0\2\12\3\0\2\12\22\0"+
    "\3\33\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\10\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\2\1\1\10\1\11\1\12\1\13\1\14\1\15\2\0"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\27\1\31\4\1"+
    "\1\32\4\1\1\2\1\0\1\6\2\0\1\6\1\0"+
    "\1\33\2\1\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\1\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\4\1\1\51\2\1\2\0\1\6\1\0\1\6\2\1"+
    "\1\52\3\1\1\53\1\54\1\55\1\0\1\2\2\1"+
    "\1\56\3\1\1\57\1\1\1\60\3\1\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u0258\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u0258\0\u0258\0\u0258"+
    "\0\u0258\0\u0258\0\u0258\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0258\0\u0258\0\u0258\0\u0258\0\u0578"+
    "\0\u0258\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\310\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u02bc\0\u0898\0\u08ca\0\u0258\0\u08fc\0\u092e\0\u0258"+
    "\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258\0\u0960\0\u0258"+
    "\0\u0258\0\u0258\0\u0258\0\u0258\0\310\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\310\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b22"+
    "\0\u08ca\0\u0b54\0\u0b86\0\310\0\u0bb8\0\u0bea\0\u0c1c\0\310"+
    "\0\310\0\310\0\u0c4e\0\u0abe\0\u0c80\0\u0cb2\0\310\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\310\0\u0d7a\0\310\0\u0dac\0\u0dde\0\u0e10"+
    "\0\310\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\2\5\1\11"+
    "\2\5\1\12\1\5\1\13\1\14\2\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\3\5\1\22\1\0\1\24"+
    "\1\25\1\5\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\0\16\50\2\0\21\50"+
    "\1\51\17\50\1\52\16\53\2\0\22\53\1\51\16\53"+
    "\1\54\1\0\1\5\1\55\6\5\1\56\2\5\1\57"+
    "\1\5\6\0\2\5\1\0\10\5\15\0\1\5\6\0"+
    "\15\5\6\0\2\5\1\0\10\5\15\0\1\5\6\0"+
    "\4\5\1\60\10\5\6\0\2\5\1\0\10\5\15\0"+
    "\1\5\6\0\1\61\14\5\6\0\2\5\1\0\10\5"+
    "\15\0\1\5\6\0\5\5\1\62\7\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\6\0\10\5\1\63\4\5"+
    "\6\0\2\5\1\0\10\5\15\0\1\5\6\0\2\5"+
    "\1\64\12\5\6\0\2\5\1\0\10\5\15\0\1\5"+
    "\6\0\13\5\1\65\1\5\6\0\2\5\1\0\10\5"+
    "\15\0\1\5\24\0\1\15\145\0\1\66\1\67\63\0"+
    "\2\70\4\0\1\70\34\0\1\71\15\0\1\72\1\73"+
    "\2\0\1\71\1\0\1\74\1\73\34\0\1\71\15\0"+
    "\1\72\2\22\1\0\1\71\2\0\1\22\55\0\1\75"+
    "\34\0\1\5\1\76\13\5\6\0\2\5\1\0\10\5"+
    "\15\0\1\5\6\0\2\5\1\77\12\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\52\0\1\100\62\0\1\101"+
    "\63\0\1\102\61\0\1\103\61\0\1\104\61\0\1\105"+
    "\64\0\1\106\7\0\10\5\1\107\4\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\5\0\16\50\2\0\21\50"+
    "\1\0\17\50\4\0\1\110\7\0\1\111\1\0\1\112"+
    "\23\0\1\113\20\0\16\53\2\0\22\53\1\0\16\53"+
    "\4\0\1\110\7\0\1\111\1\0\1\112\24\0\1\114"+
    "\20\0\2\5\1\115\12\5\6\0\2\5\1\0\10\5"+
    "\15\0\1\5\6\0\5\5\1\116\7\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\6\0\14\5\1\117\6\0"+
    "\2\5\1\0\10\5\15\0\1\5\6\0\12\5\1\120"+
    "\2\5\6\0\2\5\1\0\10\5\15\0\1\5\6\0"+
    "\6\5\1\121\6\5\6\0\2\5\1\0\10\5\15\0"+
    "\1\5\6\0\2\5\1\122\12\5\6\0\2\5\1\0"+
    "\10\5\15\0\1\5\6\0\13\5\1\123\1\5\6\0"+
    "\2\5\1\0\10\5\15\0\1\5\6\0\5\5\1\124"+
    "\7\5\6\0\2\5\1\0\10\5\15\0\1\5\5\0"+
    "\16\66\1\14\1\15\42\66\22\125\1\126\37\125\5\0"+
    "\1\71\16\0\2\70\1\0\1\71\2\0\1\70\53\0"+
    "\2\127\1\130\3\0\1\127\20\0\1\130\32\0\1\73"+
    "\5\0\1\73\30\0\1\131\3\0\1\131\3\0\1\131"+
    "\12\0\2\131\1\0\2\131\1\0\1\131\1\0\2\131"+
    "\25\0\14\5\1\132\6\0\2\5\1\0\10\5\15\0"+
    "\1\5\6\0\4\5\1\133\10\5\6\0\2\5\1\0"+
    "\10\5\15\0\1\5\6\0\15\5\6\0\2\5\1\0"+
    "\10\5\15\0\1\134\6\0\6\5\1\135\6\5\6\0"+
    "\2\5\1\0\10\5\15\0\1\5\6\0\15\5\6\0"+
    "\2\5\1\0\5\5\1\136\2\5\15\0\1\5\6\0"+
    "\13\5\1\137\1\5\6\0\2\5\1\0\10\5\15\0"+
    "\1\5\6\0\4\5\1\140\10\5\6\0\2\5\1\0"+
    "\10\5\15\0\1\5\6\0\4\5\1\141\10\5\6\0"+
    "\2\5\1\0\10\5\15\0\1\5\6\0\5\5\1\142"+
    "\7\5\6\0\2\5\1\0\10\5\15\0\1\5\5\0"+
    "\22\125\1\143\60\125\1\144\1\143\37\125\24\0\2\127"+
    "\4\0\1\127\30\0\12\5\1\145\2\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\6\0\10\5\1\146\4\5"+
    "\6\0\2\5\1\0\10\5\15\0\1\5\6\0\4\5"+
    "\1\147\10\5\6\0\2\5\1\0\10\5\15\0\1\5"+
    "\6\0\12\5\1\150\2\5\6\0\2\5\1\0\10\5"+
    "\15\0\1\5\6\0\2\5\1\151\12\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\5\0\21\125\1\15\1\143"+
    "\37\125\1\0\3\5\1\152\11\5\6\0\2\5\1\0"+
    "\10\5\15\0\1\5\6\0\15\5\6\0\2\5\1\0"+
    "\7\5\1\153\15\0\1\5\6\0\3\5\1\154\11\5"+
    "\6\0\2\5\1\0\10\5\15\0\1\5\6\0\14\5"+
    "\1\155\6\0\2\5\1\0\10\5\15\0\1\5\6\0"+
    "\14\5\1\156\6\0\2\5\1\0\10\5\15\0\1\5"+
    "\6\0\1\5\1\157\13\5\6\0\2\5\1\0\10\5"+
    "\15\0\1\5\6\0\13\5\1\160\1\5\6\0\2\5"+
    "\1\0\10\5\15\0\1\5\6\0\14\5\1\161\6\0"+
    "\2\5\1\0\10\5\15\0\1\5\6\0\4\5\1\162"+
    "\10\5\6\0\2\5\1\0\10\5\15\0\1\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\11\1\1\11\1\1\1\11\6\1\6\11\2\0"+
    "\6\1\4\11\1\1\1\11\15\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\11\2\1\7\11\1\1\5\11\10\1"+
    "\2\0\1\1\1\0\12\1\1\0\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(ParserSym.IDENTIFIER, yytext());
          }
        case 51: break;
        case 2: 
          { /* ignore */
          }
        case 52: break;
        case 3: 
          { return symbol(ParserSym.OBELUS, "/");
          }
        case 53: break;
        case 4: 
          { return symbol(ParserSym.TIMES, "*");
          }
        case 54: break;
        case 5: 
          { return symbol(ParserSym.PTO, ".");
          }
        case 55: break;
        case 6: 
          { return symbol(ParserSym.NUMERIC_LITERAL, yytext());
          }
        case 56: break;
        case 7: 
          { return symbol(ParserSym.MINUS, "-");
          }
        case 57: break;
        case 8: 
          { return symbol(ParserSym.OPEN_BLOCK, "{");
          }
        case 58: break;
        case 9: 
          { return symbol(ParserSym.CLOSE_BLOCK, "}");
          }
        case 59: break;
        case 10: 
          { string.setLength(0); yybegin(STRING);
          }
        case 60: break;
        case 11: 
          { string.setLength(0); yybegin(SSTRING);
          }
        case 61: break;
        case 12: 
          { return symbol(ParserSym.LPAREN, "(");
          }
        case 62: break;
        case 13: 
          { return symbol(ParserSym.RPAREN, ")");
          }
        case 63: break;
        case 14: 
          { return symbol(ParserSym.NOT, "!");
          }
        case 64: break;
        case 15: 
          { return symbol(ParserSym.EQUAL, "=");
          }
        case 65: break;
        case 16: 
          { return symbol(ParserSym.GREATER, ">");
          }
        case 66: break;
        case 17: 
          { return symbol(ParserSym.LESS, "<");
          }
        case 67: break;
        case 18: 
          { return symbol(ParserSym.PLUS, "+");
          }
        case 68: break;
        case 19: 
          { return symbol(ParserSym.OPEN_ARRAY, "[");
          }
        case 69: break;
        case 20: 
          { return symbol(ParserSym.CLOSE_ARRAY, "]");
          }
        case 70: break;
        case 21: 
          { return symbol(ParserSym.COMMA, ",");
          }
        case 71: break;
        case 22: 
          { return symbol(ParserSym.PTO_COMMA, ";");
          }
        case 72: break;
        case 23: 
          { string.append( yytext() );
          }
        case 73: break;
        case 24: 
          { yybegin(YYINITIAL); 
                                   return symbol(ParserSym.STRING_LITERAL, 
                                   string.toString());
          }
        case 74: break;
        case 25: 
          { string.append('\\');
          }
        case 75: break;
        case 26: 
          { return symbol(ParserSym.IF, "if");
          }
        case 76: break;
        case 27: 
          { return symbol(ParserSym.DOUBLE_MINUS, "--");
          }
        case 77: break;
        case 28: 
          { return symbol(ParserSym.AND, "&&");
          }
        case 78: break;
        case 29: 
          { return symbol(ParserSym.OR, "||");
          }
        case 79: break;
        case 30: 
          { return symbol(ParserSym.DISTINCT, "!=");
          }
        case 80: break;
        case 31: 
          { return symbol(ParserSym.EQUALS, "==");
          }
        case 81: break;
        case 32: 
          { return symbol(ParserSym.GREATER_OR_EQUAL, ">=");
          }
        case 82: break;
        case 33: 
          { return symbol(ParserSym.LESS_OR_EQUAL, "<=");
          }
        case 83: break;
        case 34: 
          { return symbol(ParserSym.DOUBLE_PLUS, "++");
          }
        case 84: break;
        case 35: 
          { string.append('\r');
          }
        case 85: break;
        case 36: 
          { string.append('\t');
          }
        case 86: break;
        case 37: 
          { string.append('\n');
          }
        case 87: break;
        case 38: 
          { string.append('\"');
          }
        case 88: break;
        case 39: 
          { string.append('\'');
          }
        case 89: break;
        case 40: 
          { return symbol(ParserSym.FOR, "for");
          }
        case 90: break;
        case 41: 
          { return symbol(ParserSym.VAR, "var");
          }
        case 91: break;
        case 42: 
          { return symbol(ParserSym.NaN, NumericLiteral.getNaN());
          }
        case 92: break;
        case 43: 
          { return symbol(ParserSym.ELSE, "else");
          }
        case 93: break;
        case 44: 
          { return symbol(ParserSym.BOOLEAN, true);
          }
        case 94: break;
        case 45: 
          { return symbol(ParserSym.NULL, "null");
          }
        case 95: break;
        case 46: 
          { return symbol(ParserSym.BOOLEAN, false);
          }
        case 96: break;
        case 47: 
          { return symbol(ParserSym.BREAK, "break");
          }
        case 97: break;
        case 48: 
          { return symbol(ParserSym.RETURN, "return");
          }
        case 98: break;
        case 49: 
          { return symbol(ParserSym.FUNCTION, "function");
          }
        case 99: break;
        case 50: 
          { return symbol(ParserSym.CONTINUE, "continue");
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(ParserSym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
