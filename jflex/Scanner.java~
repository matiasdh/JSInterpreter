/* The following code was generated by JFlex 1.5.1 */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.exceptions.*;
import com.language.model.expression.*;
import com.language.model.datatypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>C:/Users/usuario/git/interpretejs/Compilador/language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\34\1\21\1\20\1\0\1\21\1\17\16\34\4\0\1\21\1\51"+
    "\1\43\1\0\1\12\1\0\1\47\1\44\1\45\1\46\1\23\1\55"+
    "\1\61\1\27\1\24\1\22\1\25\7\33\2\26\1\0\1\62\1\54"+
    "\1\52\1\53\2\0\4\31\1\30\1\31\7\12\1\56\11\12\1\32"+
    "\2\12\1\57\1\63\1\60\1\0\1\12\1\0\1\11\1\36\1\35"+
    "\1\40\1\5\1\1\1\12\1\13\1\4\1\12\1\37\1\6\1\12"+
    "\1\16\1\2\2\12\1\3\1\7\1\14\1\15\1\10\1\12\1\32"+
    "\2\12\1\41\1\50\1\42\1\0\41\34\2\0\4\12\4\0\1\12"+
    "\2\0\1\34\7\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12"+
    "\1\0\u01ca\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12"+
    "\21\0\160\34\5\12\1\0\2\12\2\0\4\12\10\0\1\12\1\0"+
    "\3\12\1\0\1\12\1\0\24\12\1\0\123\12\1\0\213\12\1\0"+
    "\5\34\2\0\236\12\11\0\46\12\2\0\1\12\7\0\47\12\11\0"+
    "\55\34\1\0\1\34\1\0\2\34\1\0\2\34\1\0\1\34\10\0"+
    "\33\12\5\0\3\12\15\0\4\34\7\0\1\12\4\0\13\34\5\0"+
    "\53\12\37\34\4\0\2\12\1\34\143\12\1\0\1\12\10\34\1\0"+
    "\6\34\2\12\2\34\1\0\4\34\2\12\12\34\3\12\2\0\1\12"+
    "\17\0\1\34\1\12\1\34\36\12\33\34\2\0\131\12\13\34\1\12"+
    "\16\0\12\34\41\12\11\34\2\12\4\0\1\12\5\0\26\12\4\34"+
    "\1\12\11\34\1\12\3\34\1\12\5\34\22\0\31\12\3\34\244\0"+
    "\4\34\66\12\3\34\1\12\22\34\1\12\7\34\12\12\2\34\2\0"+
    "\12\34\1\0\7\12\1\0\7\12\1\0\3\34\1\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\2\0"+
    "\1\34\1\12\7\34\2\0\2\34\2\0\3\34\1\12\10\0\1\34"+
    "\4\0\2\12\1\0\3\12\2\34\2\0\12\34\4\12\7\0\1\12"+
    "\5\0\3\34\1\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\34\1\0\5\34"+
    "\4\0\2\34\2\0\3\34\3\0\1\34\7\0\4\12\1\0\1\12"+
    "\7\0\14\34\3\12\1\34\13\0\3\34\1\0\11\12\1\0\3\12"+
    "\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\34"+
    "\1\12\10\34\1\0\3\34\1\0\3\34\2\0\1\12\17\0\2\12"+
    "\2\34\2\0\12\34\1\0\1\12\17\0\3\34\1\0\10\12\2\0"+
    "\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0"+
    "\1\34\1\12\7\34\2\0\2\34\2\0\3\34\10\0\2\34\4\0"+
    "\2\12\1\0\3\12\2\34\2\0\12\34\1\0\1\12\20\0\1\34"+
    "\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\4\0"+
    "\5\34\3\0\3\34\1\0\4\34\2\0\1\12\6\0\1\34\16\0"+
    "\12\34\11\0\1\12\7\0\3\34\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\7\34\1\0\3\34"+
    "\1\0\4\34\7\0\2\34\1\0\2\12\6\0\2\12\2\34\2\0"+
    "\12\34\22\0\2\34\1\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\2\0\1\34\1\12\7\34\1\0\3\34\1\0"+
    "\4\34\7\0\2\34\7\0\1\12\1\0\2\12\2\34\2\0\12\34"+
    "\1\0\2\12\17\0\2\34\1\0\10\12\1\0\3\12\1\0\51\12"+
    "\2\0\1\12\7\34\1\0\3\34\1\0\4\34\1\12\10\0\1\34"+
    "\10\0\2\12\2\34\2\0\12\34\12\0\6\12\2\0\2\34\1\0"+
    "\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0"+
    "\1\34\4\0\6\34\1\0\1\34\1\0\10\34\22\0\2\34\15\0"+
    "\60\12\1\34\2\12\7\34\4\0\10\12\10\34\1\0\12\34\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\34\2\12\6\34\1\0\2\34\1\12\2\0"+
    "\5\12\1\0\1\12\1\0\6\34\2\0\12\34\2\0\2\12\42\0"+
    "\1\12\27\0\2\34\6\0\12\34\13\0\1\34\1\0\1\34\1\0"+
    "\1\34\4\0\2\34\10\12\1\0\44\12\4\0\24\34\1\0\2\34"+
    "\5\12\13\34\1\0\44\34\11\0\1\34\71\0\53\12\24\34\1\12"+
    "\12\34\6\0\6\12\4\34\4\12\3\34\1\12\3\34\2\12\7\34"+
    "\3\12\4\34\15\12\14\34\1\12\17\34\2\0\46\12\12\0\53\12"+
    "\1\0\1\12\3\0\u0149\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12\1\0\4\12"+
    "\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12\1\0\71\12"+
    "\1\0\4\12\2\0\103\12\2\0\3\34\40\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\3\0\3\12"+
    "\17\0\15\12\1\0\4\12\3\34\13\0\22\12\3\34\13\0\22\12"+
    "\2\34\14\0\15\12\1\0\3\12\1\0\2\34\14\0\64\12\40\34"+
    "\3\0\1\12\3\0\2\12\1\34\2\0\12\34\41\0\3\34\2\0"+
    "\12\34\6\0\130\12\10\0\51\12\1\34\1\12\5\0\106\12\12\0"+
    "\35\12\3\0\14\34\4\0\14\34\12\0\12\34\36\12\2\0\5\12"+
    "\13\0\54\12\4\0\21\34\7\12\2\34\6\0\12\34\46\0\27\12"+
    "\5\34\4\0\65\12\12\34\1\0\35\34\2\0\13\34\6\0\12\34"+
    "\15\0\1\12\130\0\5\34\57\12\21\34\7\12\4\0\12\34\21\0"+
    "\11\34\14\0\3\34\36\12\12\34\3\0\2\12\12\34\6\0\46\12"+
    "\16\34\14\0\44\12\24\34\10\0\12\34\3\0\3\12\12\34\44\12"+
    "\122\0\3\34\1\0\25\34\4\12\1\34\4\12\1\34\15\0\300\12"+
    "\47\34\25\0\4\34\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\16\0\5\34\32\0\5\34\20\0\2\12\23\0\1\12\13\0\5\34"+
    "\5\0\6\34\1\0\1\12\15\0\1\12\20\0\15\12\3\0\32\12"+
    "\26\0\15\34\4\0\1\34\3\0\14\34\21\0\1\12\4\0\1\12"+
    "\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12"+
    "\4\0\1\12\21\0\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12"+
    "\6\0\4\12\3\34\16\0\46\12\12\0\66\12\11\0\1\12\17\0"+
    "\1\34\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\40\34"+
    "\57\0\1\12\u01d5\0\3\12\31\0\11\12\6\34\1\0\5\12\2\0"+
    "\5\12\4\0\126\12\2\0\2\34\2\0\3\12\1\0\132\12\1\0"+
    "\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0"+
    "\u19b6\12\112\0\u51cc\12\64\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0"+
    "\20\12\12\34\2\12\24\0\57\12\1\34\14\0\2\34\1\0\31\12"+
    "\10\0\120\12\2\34\45\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\2\12\16\0\12\12\120\0\10\12\1\34\3\12\1\34\4\12\1\34"+
    "\27\12\5\34\20\0\1\12\7\0\64\12\14\0\2\34\62\12\21\34"+
    "\13\0\12\34\6\0\22\34\6\12\3\0\1\12\4\0\12\34\34\12"+
    "\10\34\2\0\27\12\15\34\14\0\35\12\3\0\4\34\57\12\16\34"+
    "\16\0\1\12\12\34\46\0\51\12\16\34\11\0\3\12\1\34\10\12"+
    "\2\34\2\0\12\34\6\0\27\12\3\0\1\12\1\34\4\0\60\12"+
    "\1\34\1\12\3\34\2\12\2\34\5\12\2\34\1\12\1\34\1\12"+
    "\30\0\3\12\43\0\6\12\2\0\6\12\2\0\6\12\11\0\7\12"+
    "\1\0\7\12\221\0\43\12\10\34\1\0\2\34\2\0\12\34\6\0"+
    "\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u012e\12\2\0\76\12\2\0"+
    "\152\12\46\0\7\12\14\0\5\12\5\0\1\12\1\34\12\12\1\0"+
    "\15\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0"+
    "\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\15\12\3\0"+
    "\20\34\20\0\7\34\14\0\2\12\30\0\3\12\31\0\1\12\6\0"+
    "\5\12\1\0\207\12\2\0\1\34\4\0\1\12\13\0\12\34\7\0"+
    "\32\12\4\0\1\12\1\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\3\0\2\12\3\0\2\12\22\0"+
    "\3\34\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\10\2\2\3\1\4\1\5\1\6\2\7"+
    "\1\10\2\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\1\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\30\1\32"+
    "\4\2\1\33\6\2\1\3\1\0\1\7\2\0\1\7"+
    "\1\0\1\34\2\2\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\2\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\5\2\1\52\3\2\2\0\1\7\1\0\1\7"+
    "\2\2\1\53\2\2\1\54\1\55\1\56\1\57\1\60"+
    "\1\0\1\3\5\2\1\61\1\2\1\62\3\2\1\63"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\234\0\u02a4\0\234"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\234\0\234"+
    "\0\234\0\234\0\234\0\234\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\234\0\234\0\234\0\234"+
    "\0\u05b0\0\234\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0104\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u02d8\0\u0958\0\u098c\0\234"+
    "\0\u09c0\0\u09f4\0\234\0\234\0\234\0\234\0\234\0\234"+
    "\0\234\0\u0a28\0\234\0\234\0\234\0\234\0\234\0\u0104"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0104\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c64\0\u098c\0\u0c98\0\u0ccc"+
    "\0\u0104\0\u0d00\0\u0d34\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u0d68\0\u0bfc\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0104"+
    "\0\u0ea0\0\u0104\0\u0ed4\0\u0f08\0\u0f3c\0\u0104\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\2\6\1\12"+
    "\3\6\1\13\1\6\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\6\1\23\1\4\1\25"+
    "\1\26\2\6\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\4\17\51\2\0\22\51"+
    "\1\52\17\51\1\53\17\54\2\0\23\54\1\52\16\54"+
    "\1\55\65\0\1\6\1\56\6\6\1\57\3\6\1\60"+
    "\1\6\6\0\2\6\1\0\11\6\15\0\1\6\6\0"+
    "\16\6\6\0\2\6\1\0\11\6\15\0\1\6\6\0"+
    "\4\6\1\61\11\6\6\0\2\6\1\0\11\6\15\0"+
    "\1\6\6\0\1\62\15\6\6\0\2\6\1\0\11\6"+
    "\15\0\1\6\6\0\5\6\1\63\10\6\6\0\2\6"+
    "\1\0\11\6\15\0\1\6\6\0\1\6\1\64\6\6"+
    "\1\65\5\6\6\0\2\6\1\0\11\6\15\0\1\6"+
    "\6\0\2\6\1\66\7\6\1\67\3\6\6\0\2\6"+
    "\1\0\11\6\15\0\1\6\6\0\14\6\1\70\1\6"+
    "\6\0\2\6\1\0\11\6\15\0\1\6\25\0\1\16"+
    "\65\0\1\71\1\72\65\0\2\73\4\0\1\73\35\0"+
    "\1\74\16\0\1\75\1\76\2\0\1\74\1\0\1\77"+
    "\1\76\35\0\1\74\16\0\1\75\2\23\1\0\1\74"+
    "\2\0\1\23\57\0\1\100\35\0\1\6\1\101\14\6"+
    "\6\0\2\6\1\0\11\6\15\0\1\6\6\0\2\6"+
    "\1\102\13\6\6\0\2\6\1\0\11\6\15\0\1\6"+
    "\54\0\1\103\64\0\1\104\65\0\1\105\63\0\1\106"+
    "\63\0\1\107\63\0\1\110\66\0\1\111\7\0\10\6"+
    "\1\112\5\6\6\0\2\6\1\0\11\6\15\0\1\6"+
    "\5\0\17\51\2\0\22\51\1\0\17\51\4\0\1\113"+
    "\10\0\1\114\1\0\1\115\24\0\1\116\20\0\17\54"+
    "\2\0\23\54\1\0\16\54\4\0\1\113\10\0\1\114"+
    "\1\0\1\115\25\0\1\117\20\0\2\6\1\120\13\6"+
    "\6\0\2\6\1\0\11\6\15\0\1\6\6\0\5\6"+
    "\1\121\10\6\6\0\2\6\1\0\11\6\15\0\1\6"+
    "\6\0\15\6\1\122\6\0\2\6\1\0\11\6\15\0"+
    "\1\6\6\0\13\6\1\123\2\6\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\6\0\6\6\1\124\7\6\6\0"+
    "\2\6\1\0\11\6\15\0\1\6\6\0\3\6\1\125"+
    "\12\6\6\0\2\6\1\0\11\6\15\0\1\6\6\0"+
    "\2\6\1\126\13\6\6\0\2\6\1\0\11\6\15\0"+
    "\1\6\6\0\14\6\1\127\1\6\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\6\0\3\6\1\130\12\6\6\0"+
    "\2\6\1\0\11\6\15\0\1\6\6\0\5\6\1\131"+
    "\10\6\6\0\2\6\1\0\11\6\15\0\1\6\5\0"+
    "\17\71\1\15\1\16\43\71\23\132\1\133\40\132\5\0"+
    "\1\74\17\0\2\73\1\0\1\74\2\0\1\73\55\0"+
    "\2\134\1\135\3\0\1\134\21\0\1\135\33\0\1\76"+
    "\5\0\1\76\31\0\1\136\3\0\1\136\3\0\1\136"+
    "\13\0\2\136\1\0\2\136\1\0\1\136\1\0\2\136"+
    "\1\0\1\136\24\0\15\6\1\137\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\6\0\4\6\1\140\11\6\6\0"+
    "\2\6\1\0\11\6\15\0\1\6\6\0\16\6\6\0"+
    "\2\6\1\0\11\6\15\0\1\141\6\0\6\6\1\127"+
    "\7\6\6\0\2\6\1\0\11\6\15\0\1\6\6\0"+
    "\16\6\6\0\2\6\1\0\5\6\1\142\3\6\15\0"+
    "\1\6\6\0\14\6\1\143\1\6\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\6\0\4\6\1\144\11\6\6\0"+
    "\2\6\1\0\11\6\15\0\1\6\6\0\16\6\6\0"+
    "\2\6\1\0\10\6\1\145\15\0\1\6\6\0\4\6"+
    "\1\146\11\6\6\0\2\6\1\0\11\6\15\0\1\6"+
    "\6\0\6\6\1\147\7\6\6\0\2\6\1\0\11\6"+
    "\15\0\1\6\6\0\5\6\1\150\10\6\6\0\2\6"+
    "\1\0\11\6\15\0\1\6\5\0\23\132\1\151\62\132"+
    "\1\152\1\151\40\132\25\0\2\134\4\0\1\134\31\0"+
    "\13\6\1\153\2\6\6\0\2\6\1\0\11\6\15\0"+
    "\1\6\6\0\10\6\1\154\5\6\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\6\0\13\6\1\155\2\6\6\0"+
    "\2\6\1\0\11\6\15\0\1\6\6\0\2\6\1\156"+
    "\13\6\6\0\2\6\1\0\11\6\15\0\1\6\5\0"+
    "\22\132\1\16\1\151\40\132\1\0\3\6\1\157\12\6"+
    "\6\0\2\6\1\0\11\6\15\0\1\6\6\0\16\6"+
    "\6\0\2\6\1\0\7\6\1\160\1\6\15\0\1\6"+
    "\6\0\3\6\1\161\12\6\6\0\2\6\1\0\11\6"+
    "\15\0\1\6\6\0\15\6\1\162\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\6\0\15\6\1\163\6\0\2\6"+
    "\1\0\11\6\15\0\1\6\6\0\1\6\1\164\14\6"+
    "\6\0\2\6\1\0\11\6\15\0\1\6\6\0\14\6"+
    "\1\165\1\6\6\0\2\6\1\0\11\6\15\0\1\6"+
    "\6\0\15\6\1\166\6\0\2\6\1\0\11\6\15\0"+
    "\1\6\6\0\4\6\1\167\11\6\6\0\2\6\1\0"+
    "\11\6\15\0\1\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\11\1\1\11\1\1\1\11\6\1\6\11"+
    "\10\1\4\11\1\1\1\11\17\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\11\2\1\7\11\1\1\5\11\12\1"+
    "\2\0\1\1\1\0\13\1\1\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Illegal character <"+ yytext()+"> at" + yyline() + " " + yycolumn());
          }
        case 53: break;
        case 2: 
          { return symbol(ParserSym.IDENTIFIER, yytext());
          }
        case 54: break;
        case 3: 
          { /* ignore */
          }
        case 55: break;
        case 4: 
          { return symbol(ParserSym.OBELUS);
          }
        case 56: break;
        case 5: 
          { return symbol(ParserSym.TIMES);
          }
        case 57: break;
        case 6: 
          { return symbol(ParserSym.PTO);
          }
        case 58: break;
        case 7: 
          { return symbol(ParserSym.NUMERIC_LITERAL, yytext());
          }
        case 59: break;
        case 8: 
          { return symbol(ParserSym.MINUS);
          }
        case 60: break;
        case 9: 
          { return symbol(ParserSym.OPEN_BLOCK);
          }
        case 61: break;
        case 10: 
          { return symbol(ParserSym.CLOSE_BLOCK);
          }
        case 62: break;
        case 11: 
          { string.setLength(0); yybegin(STRING);
          }
        case 63: break;
        case 12: 
          { string.setLength(0); yybegin(SSTRING);
          }
        case 64: break;
        case 13: 
          { return symbol(ParserSym.LPAREN);
          }
        case 65: break;
        case 14: 
          { return symbol(ParserSym.RPAREN);
          }
        case 66: break;
        case 15: 
          { return symbol(ParserSym.NOT);
          }
        case 67: break;
        case 16: 
          { return symbol(ParserSym.EQUAL);
          }
        case 68: break;
        case 17: 
          { return symbol(ParserSym.GREATER);
          }
        case 69: break;
        case 18: 
          { return symbol(ParserSym.LESS);
          }
        case 70: break;
        case 19: 
          { return symbol(ParserSym.PLUS);
          }
        case 71: break;
        case 20: 
          { return symbol(ParserSym.OPEN_ARRAY);
          }
        case 72: break;
        case 21: 
          { return symbol(ParserSym.CLOSE_ARRAY);
          }
        case 73: break;
        case 22: 
          { return symbol(ParserSym.COMMA);
          }
        case 74: break;
        case 23: 
          { return symbol(ParserSym.PTO_COMMA);
          }
        case 75: break;
        case 24: 
          { string.append( yytext() );
          }
        case 76: break;
        case 25: 
          { yybegin(YYINITIAL); 
                                   return symbol(ParserSym.STRING_LITERAL, 
                                   string.toString());
          }
        case 77: break;
        case 26: 
          { string.append('\\');
          }
        case 78: break;
        case 27: 
          { return symbol(ParserSym.IF);
          }
        case 79: break;
        case 28: 
          { return symbol(ParserSym.DOUBLE_MINUS);
          }
        case 80: break;
        case 29: 
          { return symbol(ParserSym.AND);
          }
        case 81: break;
        case 30: 
          { return symbol(ParserSym.OR);
          }
        case 82: break;
        case 31: 
          { return symbol(ParserSym.DISTINCT);
          }
        case 83: break;
        case 32: 
          { return symbol(ParserSym.EQUALS);
          }
        case 84: break;
        case 33: 
          { return symbol(ParserSym.GREATER_OR_EQUAL);
          }
        case 85: break;
        case 34: 
          { return symbol(ParserSym.LESS_OR_EQUAL);
          }
        case 86: break;
        case 35: 
          { return symbol(ParserSym.DOUBLE_PLUS);
          }
        case 87: break;
        case 36: 
          { string.append('\r');
          }
        case 88: break;
        case 37: 
          { string.append('\t');
          }
        case 89: break;
        case 38: 
          { string.append('\n');
          }
        case 90: break;
        case 39: 
          { string.append('\"');
          }
        case 91: break;
        case 40: 
          { string.append('\'');
          }
        case 92: break;
        case 41: 
          { return symbol(ParserSym.FOR);
          }
        case 93: break;
        case 42: 
          { return symbol(ParserSym.VAR);
          }
        case 94: break;
        case 43: 
          { return symbol(ParserSym.NaN, Numeric.getNaN());
          }
        case 95: break;
        case 44: 
          { return symbol(ParserSym.ELSE);
          }
        case 96: break;
        case 45: 
          { return symbol(ParserSym.VOID);
          }
        case 97: break;
        case 46: 
          { return symbol(ParserSym.BOOLEAN);
          }
        case 98: break;
        case 47: 
          { return symbol(ParserSym.THIS);
          }
        case 99: break;
        case 48: 
          { return symbol(ParserSym.NULL);
          }
        case 100: break;
        case 49: 
          { return symbol(ParserSym.BREAK);
          }
        case 101: break;
        case 50: 
          { return symbol(ParserSym.RETURN);
          }
        case 102: break;
        case 51: 
          { return symbol(ParserSym.FUNCTION);
          }
        case 103: break;
        case 52: 
          { return symbol(ParserSym.CONTINUE);
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(ParserSym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
